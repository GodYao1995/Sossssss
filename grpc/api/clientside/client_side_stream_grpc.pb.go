// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/client_side_stream.proto

package clientside

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientSideStreamClient is the client API for ClientSideStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientSideStreamClient interface {
	SendStreamToService(ctx context.Context, opts ...grpc.CallOption) (ClientSideStream_SendStreamToServiceClient, error)
}

type clientSideStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewClientSideStreamClient(cc grpc.ClientConnInterface) ClientSideStreamClient {
	return &clientSideStreamClient{cc}
}

func (c *clientSideStreamClient) SendStreamToService(ctx context.Context, opts ...grpc.CallOption) (ClientSideStream_SendStreamToServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientSideStream_ServiceDesc.Streams[0], "/stream.ClientSideStream/SendStreamToService", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientSideStreamSendStreamToServiceClient{stream}
	return x, nil
}

type ClientSideStream_SendStreamToServiceClient interface {
	Send(*ClientRequest) error
	CloseAndRecv() (*ServiceReply, error)
	grpc.ClientStream
}

type clientSideStreamSendStreamToServiceClient struct {
	grpc.ClientStream
}

func (x *clientSideStreamSendStreamToServiceClient) Send(m *ClientRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientSideStreamSendStreamToServiceClient) CloseAndRecv() (*ServiceReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ServiceReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientSideStreamServer is the server API for ClientSideStream service.
// All implementations must embed UnimplementedClientSideStreamServer
// for forward compatibility
type ClientSideStreamServer interface {
	SendStreamToService(ClientSideStream_SendStreamToServiceServer) error
	mustEmbedUnimplementedClientSideStreamServer()
}

// UnimplementedClientSideStreamServer must be embedded to have forward compatible implementations.
type UnimplementedClientSideStreamServer struct {
}

func (UnimplementedClientSideStreamServer) SendStreamToService(ClientSideStream_SendStreamToServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method SendStreamToService not implemented")
}
func (UnimplementedClientSideStreamServer) mustEmbedUnimplementedClientSideStreamServer() {}

// UnsafeClientSideStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientSideStreamServer will
// result in compilation errors.
type UnsafeClientSideStreamServer interface {
	mustEmbedUnimplementedClientSideStreamServer()
}

func RegisterClientSideStreamServer(s grpc.ServiceRegistrar, srv ClientSideStreamServer) {
	s.RegisterService(&ClientSideStream_ServiceDesc, srv)
}

func _ClientSideStream_SendStreamToService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientSideStreamServer).SendStreamToService(&clientSideStreamSendStreamToServiceServer{stream})
}

type ClientSideStream_SendStreamToServiceServer interface {
	SendAndClose(*ServiceReply) error
	Recv() (*ClientRequest, error)
	grpc.ServerStream
}

type clientSideStreamSendStreamToServiceServer struct {
	grpc.ServerStream
}

func (x *clientSideStreamSendStreamToServiceServer) SendAndClose(m *ServiceReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientSideStreamSendStreamToServiceServer) Recv() (*ClientRequest, error) {
	m := new(ClientRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientSideStream_ServiceDesc is the grpc.ServiceDesc for ClientSideStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientSideStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream.ClientSideStream",
	HandlerType: (*ClientSideStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendStreamToService",
			Handler:       _ClientSideStream_SendStreamToService_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/client_side_stream.proto",
}
